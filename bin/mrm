#!/usr/bin/env node
// -*- mode: js -*-
/*
 * Copyright 2018 Joyent, Inc.
 */

var path = require('path');
var url = require('url');

var bunyan = require('bunyan');
var dashdash = require('dashdash');

var manta = require('../lib');

///--- Functions

function optionsParser(name) {
    var parser = dashdash.createParser({
        options: manta.DEFAULT_CLI_OPTIONS.concat([
            {
                group: name + ' options'
            },
            {
                names: ['parallel', 'p'],
                type: 'positiveInteger',
                help: 'limit concurrent operations (default 50)',
                'default': 50,
                helpArg: 'NUM'
            },
            {
                names: ['recursive', 'r'],
                type: 'bool',
                help: 'remove directories and their contents recursively'
            }
        ])
    });

    return (parser);
}


function ifError(err) {
    if (err) {
        console.error('mrm: ' + err.toString());
        process.exit(1);
    }
}


function printEntry(obj) {
    console.log('%j', obj);
}


///--- Mainline

(function main() {
    var argTypes = ['mpath'];
    var name = path.basename(process.argv[1]);
    var log = bunyan.createLogger({
        name: name,
        level: (process.env.LOG_LEVEL || 'info'),
        stream: process.stderr
    });
    var parser = optionsParser(name);
    var parseArgs = {
        name: name,
        parser: parser,
        argTypes: argTypes,
        log: log
    };
    var options = manta.parseOptions(parseArgs);


    var client = manta.createBinClient(options);
    var i = -1;

    (function rm(cb_err) {
        ifError(cb_err);

        var p = options.paths[++i];
        if (!p) {
            client.close();
            return;
        }

        client.info(p, function (err, info) {
            if (err) {
                client.get(p, function (err2) {
                    ifError(err2);
                    // We *shouldn't* ever hit this...
                    ifError(err);
                });
                return;
            }

            if (info.extension === 'directory') {
                if (options.recursive) {
                    client.rmr(p, options, rm);
                } else {
                    console.error(p + ' is not an object');
                    process.exit(1);
                }
                return;
            }

            client.unlink(p, rm);
        });
    })();
})();
